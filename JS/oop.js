// Объектно-ориентированное програмирование //
    // - это способ проектирования и написания кода, когда все важные части программы являются объектами

        // 1. Простой объект

            // Создадим объект
            let dog = {
                name: "Maks",
                legs: 4,
                isGoodDog: true
            };
            console.log(dog);//{ name: 'Maks', legs: 4, isGoodDog: true }

            // Мы уже знаем как обращаться через точечную нотацию к объекту
            console.log(dog.name);//Maks

            // Кроме этого, мы знаем как с помощью точечной нотации добавлять объекту новые свойства
            dog.age = 6;
            console.log(dog);//{ name: 'Maks', legs: 4, isGoodDog: true, age: 6 }

        // 2. Добавление к объектам новых методов

            // Помимо строк, чисел и булевых значений в свойствах объектов можно хранить функции - тогда
            // эти свойства называются методами. Мы уже пользовались такими методами как "join" - для массивов и "toUpperCase" - для строк.
            // А теперь мы научимся создавать собствееные методы. К примеру научим нашу собаку лаять и назовем метод - bark:
            // Добавляем к объекту dog - свойство bark и задаем в качестве его значения функцию.
            dog.bark = function () {
                // Используем console.log, чтобы напечатать Гав-гав
                // С помощью this.name мы получаем значение, сохраненное в свойстве name этого объекта.
                console.log("Гав-гав! Меня зовут " + this.name + "!");
            }
            dog.bark();//Гав-гав! Меня зовут Maks!

            // Ключевое слово this - можно использовать в теле метода, чтобы обратиться к обхекту, для которого этот метод вызывается. 
                // Например - при вызове метода bark для объеткта dog, this - обозначает объект dog, а значит this.name - это свойство dog.name
                // Ключевое слово this - делает метод более гибким, позволяя добавлять один и тот же метод ко многим объектам так, 
                // чтобы он имел доступ к свойствам того объекта, для которого в данный момент вызывается.
            // Используем один метод с разными объектами

            // Создадим новую функцию speak, чтобы затем использовать ее как метод с разными объектами, обознач. разных животных
            let speak = function () {
            console.log(this.sound + "! Меня зовут " + this.name + "!");
            }

            // Теперь создадим еще один объект, чтобы добавить к нему функцию speak в качестве метода
            let cat = {
                sound: "Мяу",
                name: "Barsik",
                speak: speak//Присваиваем свойству speak значение - созданную ранее функцию speak
            };
            cat.speak();//Мяу! Меня зовут Barsik!

            // Ту же функцию speak можно использовать как метод и для других объектов
            let pig = {
                sound: "Хрю",
                name: "Nif-nif",
                speak: speak
            };
            pig.speak();//Хрю! Меня зовут Nif-nif!

            let horse = {
                sound: "И-го-го",
                name: "Mustang",
                speak: speak
            };
            horse.speak();//И-го-го! Меня зовут Mustang!

            // Однако, если в программе много объектов и методов - добавление методов вручную будет утомительно, а код запуттаным.
            // Поэтому, конструктор объектов позволяет задавать общие методы и свойства куда более удобным способом.

        // 3. Создание объектов с помощью конструкторов
        
            // В JavaScript конструктор - это функция, которая создает объекты, давая им набор заранее определенных свойств и мотодов.
            // //Устройство конструктора. При каждом вызове конструктор создает  объект, добавляя ему нужные свойства. 
            // Если для вызова обычной функции  мы указывали ее имя и следом круглые скобки, то для вызова   конструктора используется ключевое
            //слово new (которое сообщает JavaScript, что  вы собираетесь использовать функцию как конструктор), 
            // а следом —  имя конструктора и скобки
 
            let car = new Car (100, 200);
 
            // в переменной car будет сохранен объект после new идет Car - это имя конструктора числа в скобках - это аргументы,
            // передаваемые конструктору.
            // ! Большинство програмистов называют   конструктор с заглавной буквы, чтобы отличать  их от обычных функций
 
            // Создаем конструктор Car
 
            // Давайте создадим конструктор Car, который  будет добавлять к каждому
            //созданному объекту свойства x и y. Мы будем  использовать эти свойства как координаты,  задающие позицию 
            //  машины на экране при   отображении.
 
            // Создадим html документ, где и будем писать  игру

        // 4. Рисуем машины    




