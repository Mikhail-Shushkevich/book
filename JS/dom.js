// DOM - средство, позволяющее js - коду взаимодействовать с содержимым веб - страницы.
// Браузер использует DOM для структуирования страниц и их элементов(параграфов, заголовков)

// Поиск элементов
    //  По id
    //  <h1 id="main-heading">Hello, world!</h1>;
    //  Задав атрибуту id значение, мы получаем возможность найти заголовок по id и что-нибудь с ним сделать

// Поиск элемента с помощью getElementById
    // Обозначив элемент уникальным id(каждый id в документе должен иметь собственное, отличное от других значение),
    // мы можем воспользоваться DOM - методом document.getElementById, чтобы найти элемент

    let headingElement = document.getElementById("main-heading"); //с помощью document.getElementById мы нашли наш h1

//   Вызовом document.getElementById - мы даем брауезру команду отыскать элемент, id которого равен main-heading
// Этот вызов вернет DOM - обьект с соответствующим id, и мы сохраним этот обьект в переменной headingElement
//  Когда элемент найден - им можно управлять при помощи js - кода. Например, через свойство innerHTML мы
// можем узнать  - что за текст находиться внутри элемента, или заменить этот текст

    console.log(headingElement.innerHTML); //мы ввели в консоль строку, возращенную вызовом headingElement.innerHTML - т.е. Hello world

    // Эта команда возвращает содержимое headingElement - элемента, который мы нашли с помощью getElementById.

    // Меняем текст заголовка через DOM
    // Создадим новый HTML - документ(см dom.html)

    let newHeadingText = prompt("Enter a new title:"); //мы открыли диалог prompt, чтобы получить от пользователя новый заголовок и сохранили 
    // новый текст
    // headingElement.innerHTML = newHeadingText; //Присвоили сохраненное в newHeadingText значение свойству innerHTM элемента headingElement.

// Открыв этот документ в браузере - мы увидем диалог prompt Enter a new title: - после того как пользователь введет новый текст - на экране
// вместо Hello world! - появиться тот текст, который введет пользователь.

// Работа с деревом DOM через jQuery
    // Встроенные в браузер методы DOM всем хороши, но пользоваться ими бывает нелегко, поэтому многие программисты применяют 
    // специальную библиотеку под названием jQuery - это набор инструментов(в основном функции), которые сильно упрощают работу
    //  с DOM - элементами. 

// Подключаем jQuery к HTML - страничке:
    // Прежде чем воспользоваться библиотекой - нужно чтобы браузер ее загрузил - для этого достаточно одной строки HTML - кода
    // Я подключил библиотеку в HTML - документе с помощью <script src="https://code.jquery.com/jquery-3.7.1.js"></script> - где
    // src - позволяет загрузить на страницу js - файл, указав его URL

// Меняем текст заголовока с помощью jQuery
    // Мы научились - как менять заголовок с помощью DOM, сейчас мы доработаем код, чтобы менять заголовок с помощью jQuery
    //  Я задокументировал строку headingElement.innerHTML = newHeadingText; - вместо нее мы напишем другую:
    $("#main-heading").text(newHeadingText);  
    //Все работает - только важный момент!!! - если вы используете отдельный файл js - в html библиотеку подключаете перед подключением файла js

    //     <body>
    //    <h1 id="main-heading">Hello word!</h1> 
    //    <script src="https://code.jquery.com/jquery-3.7.1.js"></script>  - сначало библиотека
    //    <script src="../JS/dom.js"></script> - затем сам файл
        
    // </body>

// Создание новых элементов через jQuery
    // для создания новых элементов - будем использовать метод jQuery - обьекта append, передавая ему нужный HTML-код
    // Например, чтобы поместить в конец страницы новый элемент р - добавим такой код
    $("body").append("<p>This my hobbies: </p>");
    // Первая часть этой команды вызывает функцию $ со строкой селектора "body", чтобы найти тело(содержимое) нашего HTML-документа.
    // Поиск не обязательно должен происходить по id-код $("body") ищет элемент body, и точно так же мы можем вызвать $("p") 
    // для поиска всех элементов. Далее мы вызываем для найденного обьекта метод append-переданная ему строка преобразуется в DOM-элемент,
    // а затем добавляется внутрь элемента body, сразу перед закрывающимся тегом. Так же этот метод можно использовать в цикле for
    for(let i = 0; i < 3; i++) {
        let hobby = prompt("Name one of your hobbies!");
        $("body").append("<p>" + hobby + "</p>");
    }
    // Этот цикл повторяется трижды. При каждом повторении создается диалог prompt, запрашивающий у пользователя его хобби,
    //  после чего строка с хобби помещается между тегов <p> и передается методу append, который добавляет ее в конец элемента body.
    // Так отображается в браузере то - что вводит пользователь
        // JavaScript this is cool!!!
        //     This my hobbies
        //     Coding
        //     kino
        //     music

// Анимация элементов средствами jQuery
    // С помощью jQuery анимировать элементы совсем не сложно. К примеру, чтобы элемент медленно исчезал,
    //  мы можем воспользоваться методом fadeOut
    $("h1").fadeOut(3000);//Заголовок начинает в течении 3-ъ секунд исчезать - тайминг можно увеличивать или уменьшать
    
// Цепной вызов и анимация на jQuery
    // Если вызвать метод jQuery-обьекта, этот метод, как правило, вернет первоначальный обьект-тот, для которого он и был вызван.
    // Например, $("h1") возвращает jQuery-обьект со всеми элементами h1, а $("h1").fadeOut(3000) возвращает все тот же jQuery-обьект
    // с элементами h1. Тогда изменить текст заголовка и включить его затухание можно так
    $("h1").text("This text will disappear soon").fadeOut(3000);
    // Можно запустить несколько анимаций одного и того же элемента. Например, использовав цепной вызов методов fadeOut и fadeIn
    $("h1").fadeOut(3000).fadeIn(2000);

    // Есть еще 2 метода для анимации 
        // slideUp - элемент исчезает уплывая вверх
        // slideDown - появляются опускаясь сверху
    $("h1").slideUp(1000).slideDown(1000);

    // Практика по данным методам в файле jQuery.html

//  Полный список методов:
    // hide() - Элемент становится невидимым.
    // show() - Элемент становится видимым.
    // toggle() - Если элемент скрыт, он появится. Если видим — скроется.
    // slideUp() - Элемент сворачивается (с высотой до 0).
    // slideDown() - Элемент разворачивается (с увеличением высоты).
    // slideToggle() - Если элемент скрыт, он раскроется, если видим — скроется.
    // fadeOut() - Элемент плавно исчезает.
    // fadeIn() - Элемент плавно появляется.
    // fadeToggle() - Элемент плавно исчезает или появляется.
    // fadeTo() - Устанавливает прозрачность 50% для элемента.
    // animate() - Анимация изменения свойств: прозрачность и размер шрифта.    
    // stop() - Прекращает выполнение анимации.
        // stop(): Остановит текущую анимацию, но не остановит все анимации
        // stop(true, false): Остановит анимацию, не завершая её до конца, оставит элемент на текущем шаге.
        // stop(false, true): Немедленно завершит анимацию, не очищая очередь анимаций, и элемент перейдет в конечное состояние.
        // stop(true, true): Остановит анимацию, очистит очередь анимаций и элемент перейдет в конечное состояние.
    // delay() - Добавляет паузу в  миллисекунд перед следующей анимацией.
    // queue() - После изменения цвета выполняется следующая анимация.
    // dequeue() - Выполняет следующую анимацию в очереди.

// Что мы узнали: 
    // В этой главе мы узнали, как модифицировать HTML-страницы из js, работая с элементами DOM.
    //  Как видите - jQuery дает более мощные способы поиска элементов, а так же их изменения и даже анимации.
    // Так же мы узнали об HTML-атрибуте id, который позволяет присвоить элементу уникальный идентификатор.
    