//  Базовое устройство функции
let ourFirstFunction = function () {
  console.log("Hello World!");
};
// // Вызов функции
ourFirstFunction(); //Hello World!

// Передача аргументов в функцию
// Чтобы добавить аргументы в функцию - необходимо добавить в скобки аргумент - name
let sayHelloTo = function (name) {
  console.log("Hello, " + name + "!");
};
//Вызывая функцию, которая принимает аргумент, введите значение, которое вы хотите использовать в качестве этого аргумента в скобках
//  после имени функции. Например чтобы поздороваться с Mikle, можно ввести:
sayHelloTo("Mikle"); //Hello, Mikle!
// Если мы хотим передать другой аргумент - достаточно его изменить в вызове функции
sayHelloTo("Oksana"); //Hello, Oksana!

// Печатаем котиков
// Кроме того, переданный в функцию аргумент может указывать - сколько раз требуется что то сделать.
// Например, функция drawCats выводит в консоль смайлики. Задавая аргумент howManyTimes,
// мы сообщаем ей - сколько таких смайлов нужно напечатать
let drawCats = function (howManyTimes) {
  for (let i = 0; i < howManyTimes; i++) {
    console.log(i + "=^.^=");
  }
};
// Тело функции представляет собой цикл for, который повторяется столько раз, сколько мы напишем в вызове функции
drawCats(5);
// 0=^.^=
// 1=^.^=
// 2=^.^=
// 3=^.^=
// 4=^.^=

// Передача в функцию нескольких аргументов - первый аргумент говорит сколько раз печатать, а второй - что печатать
let printMultipleTimes = function (howManyTimes, whatToDraw) {
  for (let i = 0; i < howManyTimes; i++) {
    console.log(i + " " + whatToDraw); //Пустые ковычки нужны для того, чтобы потом в вызове функции указать то, что нам надо передать
  }
};
printMultipleTimes(5, "=^.^=");
// 0 =^.^=
// 1 =^.^=
// 2 =^.^=
// 3 =^.^=
// 4 =^.^=
// По сути, результат тот же, но здесь можно работать с несколькими аргументами
printMultipleTimes(2, ">_<");
// 0 >_<
// 1 >_<
printMultipleTimes(2, "^_^");
// 0 ^_^
// 1 ^_^

// Возврат значения из функции
// Давайте создадим функцию, которая возвращает значение.
let double1 = function (number) {
  // Чтобы вернуть из функции значение - используем return
  return number * 2;
};
double1(3); // 6 - этот результат можно увидеть, если код ввести в браузере в консоль
// Если же тестирвать код в этой программе - запись будет другая
console.log(double1(3)); //6

// Вызов функции в качестве значения
// Когда функция вызывается из кода программызначение, возвращаемое этой функцией,
//  подставляется туда, где происходит вызов. Можно воспользоваться функцией double,
//  чтобы удвоить пару чисел и затем сложить результаты:
console.log(double1(5) + double1(6)); //22
//Так же вызов функции можно указать в качестве аргумента другой функции,
// при вызове которой в аргумент попадает значение, возвращенное первой функцией.
console.log(double1(double1(3))); //12

// Функция для выбора случайного слова
 let pickRandomWord1 = function (words) {
     return words[Math.floor(Math.random() * words.length)];
 }
 // Теперь создадим массив
 let randomWords = ["dog", "cat", "mouse", "bird"];
 console.log(pickRandomWord1(randomWords));

// Генератор случайных дразнилок

 let randomBodyParts1 = ["глаз", "нос", "череп"];
 let randomAjectives1 = ["вонючая", "унылая", "дурацкая"];
 let randomWords1 = ["муха", "выдра", "дубина", "мартышка", "крыса"];

// // Выбор случайной части тела из массива randomBodyParts
 let randomBodyPart1 = randomBodyParts1[Math.floor(Math.random() * 3)];

// // Выбор случайного прилагательного из массива randomAjectives
 let randomAjective1 = randomAjectives1[Math.floor(Math.random() * 3)];

 // Выбор случайного слова из массива randomWords
 let randomWord1 = randomWords1[Math.floor(Math.random() * 5)];

 // Соединяем случайные строки в предложение
 let randomInsult1 = "У тебя " + randomBodyPart1 + " словно " + randomAjective1 + " " + randomWord1 + "!!!";
 console.log(randomInsult1);//У тебя нос словно вонючая дубина!!!

//конструкция words[Math.floor(Math.random() * length)] повторяется несколько раз. Воспользовавшись
// функцией pickRandomWord, можно переписать программу следующим образом:

//Эта часть кода, которую мы рассматривали ранее:
let pickRandomWord2 = function (words) {
  return words[Math.floor(Math.random() * words.length)];
};
//Создаем массив
let randomBodyParts2 = ["глаз", "нос", "череп"];
let randomAjectives2 = ["вонючая", "унылая", "дурацкая"];
let randomWords2 = ["муха", "выдра", "дубина", "мартышка", "крыса"];
// Соединяем случайные строки в предложение
let randomString2 = "У тебя " + pickRandomWord2(randomBodyParts2) + " словно " + pickRandomWord2(randomAjectives2) +
  " " + pickRandomWord2(randomWords2) + "!!!"; //Пустые ковычки с пробелом нужны, чтобы в предложении между слов вонючая дубина был пробел
console.log(randomString2); //У тебя нос словно вонючая дубина!!!
// Этот код отличается от предыдущего двумя моментами: 
    //Во первых мы использовали функцию pickRandomWord для выбора случайного слова из массива вместо того, чтобы каждый раз писать
    // words[Math.floor(Math.random() * length)]
    // Во вторых, вместо того, чтобы сохранять каждое случайное слово в переменной перед тем, как добавлять его к итоговой строке, 
    // мы сразу обьединяем возвращаемые из функции значения, формируя таким образом строку.
    
// Делаем генератор дразнилок функцией
 // Можно еще усовершенствовать наш генератор случайных дразнилок, сделав его функцией, которая возвращает дразнилки:
  // Наша первая функция
 let pickRandomWord = function (words) {
    return words[Math.floor(Math.random() * words.length)];
 }
// Вторая функция
 let generateRandomInsult = function () {
    let randomBodyParts = ["глаз", "нос", "рот"];
    let randomAjectives = ["вонючая", "унылая", "дурацкая"];
    let randomWords = ["муха", "выдра", "дубина", "мартышка", "крыса"];
    // Соединяем случайные строки в предложение
    let randomString = "У тебя " + pickRandomWord(randomBodyParts) + " словно " + pickRandomWord(randomAjectives) + " " 
    + pickRandomWord(randomWords) + "!!!";
    return randomString;
 }
 // generateRandomInsult();// вариант для браузера
 console.log(generateRandomInsult());
 // У тебя рот словно вонючая выдра!!!
 console.log(generateRandomInsult());
 // У тебя нос словно унылая крыса!!!
 console.log(generateRandomInsult());
 // У тебя рот словно дурацкая мартышка!!!

//  Наша новая функция generateRandomInsult представляет собой все тот же код, помещенный в тело функции 
// без аргументов. Мы добавили лишь одну строку - return randomString;, где мы возвращаем сгенерированную
//  строку randomString. Трижды вызвав функцию generateRandomInsult, мы каждый раз получаем новую дразнилку. 
// Теперь весь код находиться в функции и это означает, что для генерации дразнилки мы можем просто вызвать 
// функцию, а не копировать в консоль один и тот же каждый раз, когда понадобится кого нибудь подразнить.

// Ранний выход из функции по return
// Оператор return часто используют, чтобы выйти из функции в самом начале, если какие нибудь из переданных 
// аргументов имеют некорректные значения - то есть если с такими аргументами функция не сможет правильно работать.
// Например, следующая функция возвращает строку с информацией о пятой букве вашего имени. Если в имепни, 
// переданной в аргументе name, меньше пяти букв, будет выполнен return, чтобы сразу же выйти из функции. При этом
// оператор return в конце функции(тот, что возвращает сообщения о пятой букве) так и не будет выполнен.
let fifthLetter = function (name) {
    if (name.length < 5) {
        return;
    }
    return "Пятая буква вашего имени: " + name[4] + ".";
}
// В строке 160 мы проверяем длинну переданного имени - уж не короче ли оно пяти символов? Если это так,
// в строке 161 мы выполняем return, чтобы незамедлительно выйти из функции:
console.log(fifthLetter("Михаил"));//Пятая буква вашего имени: и.
// Если имя короче пяти - консоль выдаст undefined
console.log(fifthLetter("Мих"));//undefined

// Многократное использование return вместо конструкции if...else
// Предположим, вы пишите игру, в которой игроки награждаются медалями согласно набранным очкам.
// Счету меньше трех - бронзовая, от трех до шести - серебрянная, свыше шести - золотая.
let medalForScore = function (score) {
    if (score < 3) {
        // Мы возвращаем значение Бронзовая и выходим из функции, если счет меньше трех очков.
        return "Бронзовая";
    }
    if (score < 7) {
        // Если мы достигли Серебрянной - значит счет больше трех, но не больше семи
        return "Серебрянная";
    } 
        // Наконец мы жостигли Золотой - значит на счету как минимум 7 очков 
        return "Золотая";
}
console.log(score);
// В данном случаи нам нет обходимости использовать if...else, потому что нам не надо выбирать один вариант.
// Однако, если в каждом варианте выполняется return, это так же гарантирует однохначный выбор, поскольку
// выйти из функции можно лишь один раз.

// Сокращенная запись при создании функции
// Есть длинный и короткий способы записи:
// Длинная запись хороша тем, что видно наглядно, что функция храниться в переменной, но разработчики используют короткий вариант:

// Длинный вариант:
let duble2 = function (number) {
    return number * 2;
}
console.log(duble2(3));//6
// Короткий вариант:
// Здесь js создает переменную duble неявным образом
function duble2 (number) {
    return number * 2;
}
console.log(duble2(3));//6

// Что мы узнали:
    // Функции позволяют повторно использовать фрагменты кода. Они могут работать по разному в зависимости от преданных аргументов
    //  и могут возвращать значение в то место кода, откуда они быти вызваны. Также функции дают возможность называть фрагменты кода
    //  понятными именами, чтобы, глядя на название, мв могли сразу понять, что функция делает.

// Упражнения:

// Математические расчеты и функции: создайте две функции, add и multiply. Пусть каждая принимает по два аргумента.
// Функция add должна складывать аргументы и возвращать результат, а функция multiply - перемножать аргументы.
// С помощью только этих двух функций вычислите следующее несложное выражение: 36325 * 9824 + 777:
let add = function (a, b) {
return a + b;
}
let multiply = function (a, b) {
return a * b;
}
console.log(add(9824, 777) + multiply(36325, 9824));//356867401

// Совпадают ли массивы
// Напишите функцию areArraysSame, которая принимает два массива с числами в качестве аргументов. Она должна возвращать true,
//  если массивы одинаковые(тоесть содержат одни и те же числа в одном и том же порядке), или false, если массивы различаются.
//  Убедитесь, что ваша функция работает провильно, запустив код:
// areArraysSame([1, 2, 3], [4, 5, 6]);
// false
// areArraysSame([1, 2, 3], [1, 2, 3]);
// true
// areArraysSame([1, 2, 3], [1, 2, 3, 4]);
// false
function areArraysSame(arr1, arr2) {
    // Сначала проверим, равны ли по длине
    if (arr1.length !== arr2.length) {
        return false;
    }

    // Затем сравним элементы массивов
    for (let i = 0; i < arr1.length; i++) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }

    // Если все элементы равны, возвращаем true
    return true;
}

// Тестируем функцию
console.log(areArraysSame([1, 2, 3], [4, 5, 6]));  // false
console.log(areArraysSame([1, 2, 3], [1, 2, 3]));  // true
console.log(areArraysSame([1, 2, 3], [1, 2, 3, 4]));  // false

// Объяснение:


// Сначала проверяем длины массивов. Если они не равны, сразу возвращаем false.

// Если длины равны, то проходим по элементам массивов в цикле и сравниваем соответствующие элементы.

// Если находим различие, возвращаем false.

// Если все элементы совпадают, возвращаем true.



